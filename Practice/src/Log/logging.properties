# 全局日志记录器配置
.level = INFO

# 控制台输出日志处理器配置
handlers = java.util.logging.ConsoleHandler
java.util.logging.ConsoleHandler.level = INFO
java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter

# 文件输出日志处理器配置
handlers = java.util.logging.FileHandler
java.util.logging.FileHandler.level = ALL
java.util.logging.FileHandler.pattern = logs/app.log
java.util.logging.FileHandler.formatter = java.util.logging.SimpleFormatter

# Trace日志记录器配置
logger.com.example.package.level = FINEST
logger.com.example.package.handlers = java.util.logging.ConsoleHandler




# .level 设置全局的日志记录级别，默认是INFO。
# handlers 配置处理器列表，可以配置多个处理器，使用逗号隔开。
# java.util.logging.ConsoleHandler 配置控制台输出日志处理器。
# java.util.logging.ConsoleHandler.level 配置控制台输出日志的级别。
# java.util.logging.ConsoleHandler.formatter 配置控制台输出日志的格式化器。
# java.util.logging.FileHandler 配置文件输出日志处理器。
# java.util.logging.FileHandler.level 配置文件输出日志的级别。
# java.util.logging.FileHandler.pattern 配置文件输出日志的文件路径。
# java.util.logging.FileHandler.formatter 配置文件输出日志的格式化器。
# logger.com.example.package.level 配置一个com.example.package包的日志记录器，级别是FINEST，输出处理器为控制台输出日志处理器。可以配置多个日志记录器，使用不同的级别和处理器。
# 注意，以上是一个简单的示例，实际的配置文件可以根据实际需求进行调整。

# 如果要区分不同的日志级别，可以在logging.properties中为不同的日志级别定义不同的记录器和处理器。例如，可以使用一个记录器来记录错误日志，并将其级别设置为SEVERE，然后使用另一个记录器来记录调试信息，并将其级别设置为FINE。

# 具体使用可以参考JUL的官方文档。



# 其中关于，java.util.logging.FileHandler.formatter的配置应该如何写？

# java.util.logging.FileHandler.formatter 是指定 FileHandler 的格式化器，用于格式化输出日志记录。格式化器可以指定多种，包括默认的 java.util.logging.SimpleFormatter 和 java.util.logging.XMLFormatter。

# 下面是一个示例配置文件，其中使用了默认的 SimpleFormatter：

# handlers= java.util.logging.FileHandler, java.util.logging.ConsoleHandler

# .level= INFO

# java.util.logging.FileHandler.pattern = /logs/MyApp.log
# java.util.logging.FileHandler.limit = 50000
# java.util.logging.FileHandler.count = 1
# java.util.logging.FileHandler.formatter = java.util.logging.SimpleFormatter

# java.util.logging.ConsoleHandler.level = INFO
# java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter
